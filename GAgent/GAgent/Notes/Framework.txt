Selectors
 - return collections of gameagents in a dictionary
 - The agents can then be refered to by their key in the Conditions where they are used.

Conditions
 - use selectors and a reference to the world to determine if some condition is true
 - All conditions need to be some kind of boolean expression which makes a statement about the status or relationships of one or more objects in the gameworld.

Actions
 - A set of conditions determines what actions are currently selectable by the user
 - An action may be defined with parameters to give additional context to the action
	- these parameters might also use a selector? This isn't in yet, deciding if this is required.

Outcomes
 - After an action is selected, a set of conditions determines which outcomes are valid.  If more than one is valid, one is selected randomly.
 - An outcome alters world and agent state, by changing properties and relationships.

Saving State / persistence:
 - currently looking at embedded document databases for this?
 - also tried a recursive dictionary?
 - How about the local version of dynamodb?  Also helpful in upgrading skills.  I should actually do it this way.
 - I want to save db queries to file so I can use them to construct conditions and selectors.
 - Persistence will mean that agent memories will have to be saved along with world state.  Memories are typed classes.
 - Might want to consider that at some point in the future, we won't want to load all the actions/outcomes at once. some kind of deferred loading.

Relationships:
 - The idea of a relationship, defined in gameworld, might be used in selectors.
 - We might want a selector like:
	- objects with property a:
	- set of objects with relationship b to a.
 - when a relationship is defined, we would also define the inverse of that relationship.
	ex: agent a is father of b implies b is son of a.
	- To ensure that this inverse relation is preserved, we would have to make sure that when a relationships are created/destroyed it's through a function.


It really seems to me that what I actually want is some kind of structured query language for JSON.  If I had such a thing, I could implement the conditions, actions,
and outcomes using it?  The reason it would have to be a language is so I could save the functions outside of the program.  Ultimately, I want to define conditions, actions,
and outcomes as scripts outside of the main engine.

We could use Jobjects from JSON to represent the game objects, and would provide us with a way to script these object outside of the engine.
We still need a way to save the logic for selectors and conditions in a script.

I think I definitely COULD use JSON, but perhaps it's best that selectors, conditions, actions and outcomes are coded in c#. We probably need the benefit of syntax highlighting and 
static typechecking.  I should consider how I could separate the engine from the game, while keeping both c#.

Throwing out the idea of a JSON query language:
The answer then is that the selectors, condtions, actions, and outcomes must be defined together with the model. Hardcoded in C#. 
I need to stop looking for some kind of magic document database that doesn't exist.  
Refactor it again, only this time separate the engine from the game model.  I need to make progress.

Let's try factoring it out into separate projects under the same solution.
 - make a new solution
 - add a directory for journals
 - factor out the engine from the model into separate projects.  

 OR

 We go all the way.  We define our model in JSON.  Our language would then need us to provide the ability to define
  - Constructors, (doesn't exist)
  - Selectors,
  - Conditions,
  - Actions,
  - Outcomes,

All of these need to be able to reference/test/compare properties of the model or objects of the model

We need to be able to debug properly.  When an action or outcome is valid or invalid, we should be able to track the conditions which lead to it.

The model, and the conditions which describe it's state must be defined together.  They're intrinsicly tied together because you can't query a system without access to it's definitions.

The model, then, only consists of these things:
 - the definitions
 - the conditions and transformations on that model?

 If we really want to divorce the framework from the gameplay, we need to separate out the concepts of agent memories and judgements.
 I feel that the history of occurences needs to remain.  The memories are just links to occurences, and judgements are functions which act on occurences and return a value -> a judgement








 
 
 



